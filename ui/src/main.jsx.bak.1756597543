import React from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
import './index.css'


function RequireIntake({ children }) {
  const [ok, setOk] = React.useState(null);
  const nav = useNavigate();
  React.useEffect(() => {
    (async () => {
      try {
        const tok = localStorage.getItem("diet.app.token") || localStorage.getItem("diet.token");
        if (!tok) { nav("/login"); return; }
        const base = localStorage.getItem("diet.app.base") || `${location.protocol}//${location.hostname}:8010`;
        const res = await fetch(`${base}/api/v1/intake`, { headers: { "Authorization": `Bearer ${tok}` }});
        if (!res.ok) { nav("/intake"); return; }
        const j = await res.json().catch(()=>null);
        if (!j) { nav("/intake"); return; }
        setOk(true);
      } catch {
        nav("/intake");
      }
    })();
  }, []);
  if (ok === null) return null;
  return children;
}


import App from './App.jsx'
import Landing from './pages/Landing.jsx'
import Login from './pages/Login.jsx'
import Signup from './pages/Signup.jsx'
import Intake from './pages/Intake.jsx'

function hasToken(){ return localStorage.getItem("diet.app.session")==="v2"; }

function RequireAuth({ children }) {
  return hasToken() ? children : <Navigate to="/" replace />;
}
function RedirectIfAuthed({ children }) {
  return hasToken() ? <Navigate to="/app" replace /> : children;
}

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<RedirectIfAuthed><Landing /></RedirectIfAuthed>} />
        <Route path="/login" element={<RedirectIfAuthed><Login /></RedirectIfAuthed>} />
        <Route path="/signup" element={<RedirectIfAuthed><Signup /></RedirectIfAuthed>} />
        <Route path="/intake" element={<RequireAuth><Intake /></RequireAuth>} />
        <Route path="/app" element={<RequireAuth><App /></RequireAuth>} />
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>
)
